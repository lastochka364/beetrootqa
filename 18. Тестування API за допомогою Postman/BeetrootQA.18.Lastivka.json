{
	"info": {
		"_postman_id": "5de6ee77-80f2-4c7a-a04f-092643d4c6b0",
		"name": "Beetroot QA. 18. Lastivka",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21531982"
	},
	"item": [
		{
			"name": "Beet Seed",
			"item": [
				{
					"name": "1. Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// For each request, updating ID of user, getting it from response\r",
									"let response_data = pm.response.json();\r",
									"pm.collectionVariables.set(\"vars_in_body_user_id\", response_data.id);\r",
									"\r",
									"// Checking if the request is successfull (status 200)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Checking if stored ID really matches ID from response\r",
									"pm.test(\"ID is successfully updated in collection envs\", function () {\r",
									"    pm.collectionVariables.get(\"vars_in_body_user_id\") == response_data.id\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n    \"age\": {{age}},\n    \"gender\": \"{{gender}}\",\n    \"city\": \"{{city}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "2. Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Checking if the request is successfull (status 200)",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Checking if the name from response equals to the stored one",
									"let name_from_collection = pm.collectionVariables.get(\"name\");",
									"let response_data = pm.response.json();",
									"pm.test(`Name is \"${name_from_collection}\"`, function () {",
									"    pm.expect(response_data.name).to.eql(name_from_collection);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?id={{vars_in_body_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vars_in_body_user_id}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "3. Edit user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Checking if the request is successfull",
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									"",
									"// Checking if the name from response matches the stored one",
									"let updated_name_from_collection = pm.collectionVariables.get(\"name_for_update\");",
									"let response_data = pm.response.json();",
									"pm.test(`Name is \"${updated_name_from_collection}\"`, function () {",
									"    pm.expect(response_data.name).to.eql(updated_name_from_collection);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{vars_in_body_user_id}}\",\n    \"name\": \"{{name_for_update}}\",\n    \"age\": {{age_for_update}},\n    \"gender\": \"{{gender_for_update}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "4. Delete user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Checking if the request is successfull",
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									"",
									"// Checking if the request body really have \"User is deleted\" text",
									"pm.test(\"User is really deleted\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User is deleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users?id={{vars_in_body_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "id",
									"value": "{{vars_in_body_user_id}}"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Beet Sprout",
			"item": [
				{
					"name": "1. Create user with invalid gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Negative test 1\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Negative test 2\r",
									"pm.test(\"Validation error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Validation error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{name}}\",\n    \"age\": {{age}},\n    \"gender\": \"gender\",\n    \"city\": \"{{city}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "2. Get user by ID with invalid ID param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Negative test 1",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Negative test 2",
									"pm.test(\"ID is required parameter\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id is required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users?idd={{vars_in_body_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "idd",
									"value": "{{vars_in_body_user_id}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "3. Edit user by ID with invalid body param ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Negative test 1",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Negative test 2",
									"pm.test(\"Id is required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Id is required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"idd\": \"{{vars_in_body_user_id}}\",\n    \"name\": \"{{name_for_update}}\",\n    \"age\": {{age_for_update}},\n    \"gender\": \"{{gender_for_update}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "4. Delete user by ID with invalid param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Negative test 1",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Negative test 2",
									"pm.test(\"ID is required\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id is required\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users?idd={{vars_in_body_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "idd",
									"value": "{{vars_in_body_user_id}}"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://em.staging.api.onereach.ai/http/1b3bebb7-e882-4f1e-a74b-ee381bfa69d6"
		},
		{
			"key": "name",
			"value": "testname",
			"type": "string"
		},
		{
			"key": "age",
			"value": "20",
			"type": "string"
		},
		{
			"key": "gender",
			"value": "male",
			"type": "string"
		},
		{
			"key": "city",
			"value": "London",
			"type": "string"
		},
		{
			"key": "vars_in_body_user_id",
			"value": "b49cba39-ab8f-493c-9fa2-4d756c9e3773",
			"type": "string"
		},
		{
			"key": "name_for_update",
			"value": "updated_testname",
			"type": "string"
		},
		{
			"key": "age_for_update",
			"value": "19",
			"type": "string"
		},
		{
			"key": "gender_for_update",
			"value": "female",
			"type": "string"
		},
		{
			"key": "city_for_update",
			"value": "Budapest",
			"type": "string"
		}
	]
}